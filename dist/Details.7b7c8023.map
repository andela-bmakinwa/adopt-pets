{"version":3,"sources":["Carousel.js","Details.js"],"names":["Carousel","state","photos","active","handleIndexClick","event","setState","target","dataset","index","React","Component","value","map","photo","media","filter","Details","petfinder","key","secret","LoadableModalContent","loader","loading","showModal","toggleModal","pet","get","output","id","props","then","data","breed","Array","isArray","breeds","join","name","animal","location","contact","city","description","catch"],"mappings":"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","file":"Details.7b7c8023.map","sourceRoot":"../src","sourcesContent":["import React from \"react\";\n\nclass Carousel extends React.Component {\n  state = {\n    photos: [],\n    active: 0\n  };\n\n  static getDerivedStateFromProps({ media }) {\n    let photos = [];\n\n    if (media && media.photos && media.photos.photo) {\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\n    }\n\n    return { photos };\n  }\n\n  handleIndexClick = event => {\n    this.setState({\n      active: +event.target.dataset.index\n    });\n  };\n\n  render() {\n    const { photos, active } = this.state;\n    return (\n      <div className=\"carousel\">\n        <img src={photos[active].value} alt=\"primary animal\" />\n        <div className=\"carousel-smaller\">\n          {photos.map((photo, index) => (\n            /* ideally have an image in a button with the button having the click event*/\n            /* eslint-disable-next-line */\n            <img\n              onClick={this.handleIndexClick}\n              key={photo.value}\n              data-index={index}\n              src={photo.value}\n              className={index === active ? \"active\" : \"\"}\n              alt=\"animal thumbnail\"\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from \"react\";\nimport pf from \"petfinder-client\";\nimport Loadable from \"react-loadable\";\nimport { navigate } from \"@reach/router\";\nimport Carousel from \"./Carousel\";\n\nconst petfinder = pf({\n  key: process.env.API_KEY,\n  secret: process.env.API_SECRET\n});\n\nconst LoadableModalContent = Loadable({\n  loader: () => import(\"./AdoptModalContent\"),\n  loading() {\n    return <p>Loading Modal...</p>;\n  }\n});\n\nclass Details extends React.Component {\n  state = {\n    loading: true,\n    showModal: false\n  };\n\n  toggleModal = () => this.setState({ showModal: !this.state.showModal });\n\n  componentDidMount() {\n    petfinder.pet\n      .get({\n        output: \"full\",\n        id: this.props.id\n      })\n      .then(data => {\n        const pet = data.petfinder.pet;\n        let breed;\n\n        if (Array.isArray(data.petfinder.pet.breeds.breed)) {\n          breed = pet.breeds.breed.join(\", \");\n        } else {\n          breed = pet.breeds.breed;\n        }\n\n        this.setState({\n          name: pet.name,\n          breed,\n          animal: pet.animal,\n          location: `${pet.contact.city}, ${pet.contact.state}`,\n          description: pet.description,\n          media: pet.media,\n          loading: false\n        });\n      })\n      .catch(() => {\n        navigate(\"/\");\n      });\n  }\n  render() {\n    if (this.state.loading) {\n      return <h1>Current loading...</h1>;\n    }\n\n    const {\n      name,\n      animal,\n      breed,\n      location,\n      description,\n      media,\n      showModal\n    } = this.state;\n\n    return (\n      <div className=\"details\">\n        <Carousel media={media} />\n        <div>\n          <h1>{name}</h1>\n          <h2>\n            {animal} - {breed} - {location}\n          </h2>\n          <button onClick={this.toggleModal}>Adopt {name}</button>\n          <p>{description}</p>\n          {showModal ? (\n            <LoadableModalContent toggleModal={this.toggleModal} name={name} />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n"]}